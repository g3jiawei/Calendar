Why are you changing your design (if there is any changes)
Briefly highlight the problems you have faced and how as a team you managed to solve them.
Highlight Design Patterns
- Highlight all Design Patterns you have used in your project.
- You can also highlight some design patterns in the frameworks you are using.

Implementation is focus, but we direct our focus up to the underlying user needs. Our refinement of application design was based on the user needs.
Based on our user stories, we decide to implement on a mobile platform, even when we were more comfortable with the website platform.
Our consistent approach we applied to solve problems is to first ask your subgroup partner, then ask the whole team if not solved.

One obvious first encounter of problems is the diversity of skills we have. The communication was intense and constant to find a consensus of exactly
how we will achieve this prototype/MVP. The exact distribution of the work is laid out in the documents under Proj-Morning-Team10-repo.
After partitioning vigorously as a team, the task distribution problem was solved and we quickly offset into development.

To emphasize our communication efficiency, we utilized not only Github's system messages, but also other social networks. We chose Facebook because it was
readily available for everyone. On top of that, everyone had each other's phone numbers for prompt situations.

In terms of development problems, one obstacle is the connection the Backend and Front end. Specifically, the connection between the database
and the Interface; requesting information and receiving the response. In school, we have acquired theoretical understanding of these components,
however, in reality it comes to understanding syntax and API. Furthermore, testing was inhibited because of the lack of briding between two components.
Fortunately, we were able to store information in text files and ran localhost for the purpose of the class demonstration. 
As a team, we quickly pivoted into this solution, and are still currently working on the connection in order to perfect the product.

Regarding the frameworks we used, (list the problems encountered)...
The Github merge did not work as well as we planned. Pushing remotely onto the repository updated the version of code. However, when 
another team member pulled it, bugs were encountered. 
To solve this issue, (what did we do?) The time of submission was checked to work with the latest solution.

The design pattern we used is _MVC_. MVC stands for model-view-controller. 

The Model-View-Controller (MVC) design pattern assigns objects in an application one of three roles: model, view, or controller. 
The pattern defines the way objects communicate with each other. The Model object in MVC encapsulate the data specific to an application 
and define the logic and computation that manipulate and process that data. The View object in MVC is an object in an application that 
users can see. The controller object in MVC controls the data flow into model object and updates the view whenever data changes. 
The controller also keeps View and Model separate.

(then express what MVC is in OUR POINT OF VIEW) ....
(list two SPECIFIC encounters with MVC PATTERN)...
(relate problems with the MVC PATTERN WE ENCOUNTERed)...

Throughout the whole process, we acquired an important mindset imperceptibly: to not only solve problems as they arrive, but also 
predict. Furthermore, to build the product agilely, which allowed us to learn at each transition. Once the hurdle was cleared, only more wlll follow, and more lessons will be learned. The process may not be perfect, but it is only being perfect as time passes.
