**Phase 3**

Question 1:
Implementation is focus, but we directed our focus up to the underlying user needs. Our refinement of application design was based on the user needs.
Based on our user stories, we decided to implement our application on a mobile platform, even when we were more comfortable with building it on a website platform.
Our consistent approach to solve problems was to first ask our subgroup partner, then ask the whole team if not solved.

Question 2:
The first problem we encountered as a team was the diversity of skills we all have. The communication was intense and constant to find a consensus of exactly
how we will achieve this prototype/MVP. The exact distribution of the work is laid out in the documents under Proj-Morning-Team10-repo.
After partitioning vigorously as a team, the task distribution problem was solved and we quickly offset into development.

To emphasize our communication efficiency, we utilized not only Github's system messages, but also other social networks. We chose Facebook because it was
readily available for everyone. On top of that, everyone had each other's phone numbers for prompt situations.

In terms of development problems, one obstacle is the connection the Backend and Front end. Specifically, the connection between the database
and the Interface; requesting information and receiving the response. In school, we have acquired theoretical understanding of these components,
however, in reality it comes to understanding syntax and API. Furthermore, testing was inhibited because of the lack of briding between two components.
Fortunately, we were able to store the information in text files and ran localhost for the purpose of the class demonstration. 
As a team, we quickly pivoted into this solution, and are still currently working on the connection in order to perfect the product.

Regarding the frameworks we used, (list the problems encountered)...
The Github merge did not work as well as we planned. Pushing remotely onto the repository updated the version of code. However, when 
another team member pulled it, bugs were encountered. 
To solve this issue, (what did we do?) The time of submission was checked to work with the latest solution.


Question 3:
We used three design patterns which are:  Model-view-controller, Data Access Object and Singleton Design pattern.

The Model-View-Controller (MVC) design pattern assigns objects in our application one of three roles: model, view, or controller. 
The Model object in MVC encapsulates the data specific to our application 
and defined the logic and computation that manipulated and processed that data. The View object in MVC is an object in an application that 
users can see. The controller object in MVC controls the data flow into model object and updates the view whenever data changes. 
The controller also keeps View and Model separate.

(then express what MVC is in OUR POINT OF VIEW) ....
(list two SPECIFIC encounters with MVC PATTERN)...
(relate problems with the MVC PATTERN WE ENCOUNTERed)...

We used the Data Access Object Design Pattern (DAO) to separate low level data accessing API or operations from high level operations.
The DAO interface defined the standard operations to be performed on a model object(s) and the DAO class implemented the interface. 
This class was responsible for getting data from the text file containing all the stored information.


The Singleton design pattern had a single class which was responsible for creating its own object while making sure that only single 
object get created. This class provided a way to access its only object which could be accessed directly without a need to create an 
instance of the object of the class.

Conclusion: 
Throughout the whole process, we acquired an important mindset imperceptibly: to not only solve problems as they arrive, but also 
predict. Furthermore, to build the product agilely, which allowed us to learn at each transition. Once the hurdle was cleared, only 
more wlll follow, and more lessons will be learned. The process may not be perfect, but it is only being perfect as time passes.

